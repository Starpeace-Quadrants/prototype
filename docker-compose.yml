services:
  gk-traefik:
    image: traefik:v2.10
    container_name: gk-traefik
    restart: unless-stopped
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "8080:8080" # Traefik Dashboard
    networks:
      - kafka_network
    command:
      - --log=true
      - --log.level=ERR
      - --tracing=false
      - --accesslog=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/traefik/traefik.toml:/traefik.toml
      - ./.docker/traefik/cert.pem:/certs/cert.pem
      - ./.docker/traefik/key.pem:/certs/key.pem

  zookeeper:
    platform: linux/arm64
    image: bitnami/zookeeper:3.8.1
    container_name: gk-zookeeper
    networks:
      - kafka_network
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
      ZOO_MAX_CNXNS: 60

  kafka1:
    platform: linux/arm64
    image: bitnami/kafka:3.5.0
    hostname: kafka1
    container_name: kafka1
    networks:
      - kafka_network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 6

  kafka2:
    platform: linux/arm64
    image: bitnami/kafka:3.5.0
    hostname: kafka2
    container_name: kafka2
    networks:
      - kafka_network
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 6

  kafka3:
    platform: linux/arm64
    image: bitnami/kafka:3.5.0
    hostname: kafka3
    container_name: kafka3
    networks:
      - kafka_network
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 6

  kafka-init:
    image: bitnami/kafka:3.5.0
    container_name: gk-kafka-init
    networks:
      - kafka_network
    command: [ "/bin/bash", "-c", "/topics.sh" ]
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    volumes:
      - type: bind
        source: ./topics.sh
        target: /topics.sh
      - type: bind
        source: ./topics.txt
        target: /topics.txt
    init: true

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: gk-kafka-ui
    networks:
      - kafka_network
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    labels:
      - traefik.enable=true
      - traefik.http.routers.kafka-ui.rule=Host(`kafka-ui.localhost`)
      - traefik.http.routers.kafka-ui.entrypoints=websecure
      - traefik.http.routers.kafka-ui.tls=true
      - traefik.http.services.kafka-ui.loadbalancer.server.port=8080

  relay:
    build:
      context: ../gk-kafka-relay
      dockerfile: Dockerfile
    container_name: gk-kafka-relay
    volumes:
      - .:/relay
    labels:
      - traefik.enable=true
      - traefik.http.routers.relay.rule=Host(`relay.localhost`)
      - traefik.http.routers.relay.entrypoints=websecure
      - traefik.http.services.relay.loadbalancer.server.port=8099
    networks:
      - kafka_network
  client:
    build:
      context: ../gk-kafka-client
      dockerfile: Dockerfile
    container_name: gk-kafka-client
    ports:
      - "3000:3000"
    volumes:
      - ../gk-kafka-client:/app
      - ../gk-kafka-client/certs:/app/certs
    working_dir: /app
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`client.localhost`)
      - traefik.http.routers.client.entrypoints=websecure
      - traefik.http.services.client.loadbalancer.server.port=3000
    networks:
      - kafka_network
  auth:
    build:
      context: ../golang-kafka-hybrid-auth
      dockerfile: Dockerfile
    container_name: gk-kafka-auth
    volumes:
      - ../golang-kafka-hybrid-auth:/app
      - ../golang-kafka-hybrid-auth/certs:/app/certs
    working_dir: /app
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.rule=Host(`auth.localhost`)
      - traefik.http.routers.auth.entrypoints=websecure
      - traefik.http.services.auth.loadbalancer.server.port=3000
    networks:
      - kafka_network
networks:
  kafka_network:
    name: kafka_test_network
