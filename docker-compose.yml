services:
  traefik:
    image: traefik:v2.6
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80" # HTTP
      - "8080:8080" # Traefik Dashboard
    networks:
      - kafka_network
    command:
      - --log=true
      - --log.level=ERR
      - --tracing=false
      - --accesslog=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.tls=false"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.auth-redirect.redirectregex.regex=^http://localhost/(.*)"
      - "traefik.http.middlewares.auth-redirect.redirectregex.replacement=http://api.causevest.localhost/$${1}"
      - "traefik.http.routers.auth-redirect.rule=Host(`localhost`) && PathPrefix(`/api/authentication/google/login`)"
      - "traefik.http.routers.auth-redirect.service=noop@internal"
      - "traefik.http.routers.auth-redirect.middlewares=auth-redirect"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/traefik/traefik.toml:/traefik.toml

  zookeeper:
    image: bitnami/zookeeper:latest
    networks:
      - kafka_network
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  kafka:
    image: bitnami/kafka:latest
    deploy:
      replicas: 3
    networks:
      - kafka_network
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_NUM_PARTITIONS: 4
    restart: on-failure
    depends_on:
      - zookeeper

  kafka-init:
    image: bitnami/kafka:latest
    networks:
      - kafka_network
    command: [ "/bin/bash", "-c", "/topics.sh" ]
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - type: bind
        source: ./topics.sh
        target: /topics.sh
      - type: bind
        source: ./topics.txt
        target: /topics.txt
    init: true

  kafdrop:
    image: obsidiandynamics/kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: -Xms32M -Xmx64M
      SERVER_SERVLET_CONTEXTPATH: /
    networks:
      - kafka_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.kafdrop.rule=Host(`kafdrop.localhost`)
      - traefik.http.routers.kafdrop.entrypoints=web
    depends_on:
      - kafka
  relay:
    build:
      context: ../gk-kafka-relay
      dockerfile: Dockerfile
    volumes:
      - .:/relay
    labels:
      - traefik.enable=true
      - traefik.http.routers.relay.rule=Host(`relay.localhost`)
      - traefik.http.routers.relay.entrypoints=web
      - traefik.http.services.relay.loadbalancer.server.port=8099
    networks:
      - kafka_network
  client:
    build:
      context: ../gk-kafka-client
      dockerfile: Dockerfile
    volumes:
      - .:/client
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`client.localhost`)
      - traefik.http.routers.client.entrypoints=web
      - traefik.http.services.client.loadbalancer.server.port=8080
    networks:
      - kafka_network
networks:
  kafka_network:
    name: kafka_test_network
